// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(cuid())
  email String @unique
  username String @unique
  clerkId String @unique
  name String?
  bio String?
  image String?
  location String?
  website String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


//relations
  posts Post[] //one to many
  comments Comment[] //one to many
  likes Like[] //one to many
  
  followers Follows[] @relation("follower") //users who follow this user
  following Follows[] @relation("following") //users this user follows

  notifications Notification[] @relation("userNotifications") //notifications recieved by a user
  notificationsCreated Notification[] @relation("notificationCreator") //notifications triggered by a user
}


model Post{
  id String @id @default(cuid())
  authorId String
  content String?
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relations
  author User @relation(fields: [authorId],references: [id],onDelete: Cascade) // cascadde delete means delete all posts if author is deleted

  comments Comment[]
  likes Like[]
  notifications Notification[]
}


model Comment{
  id String @id @default(cuid())
  content String?
  
  authorId String
  postId String
  createdAt DateTime @default(now())
  notifications Notification[]
  //relations
  author User @relation(fields: [authorId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade)

  @@index([authorId,postId]) //composite index for faster queries
}

model Like{
  id String @id @default(cuid())
  postId String
  userId String
  createdAt DateTime @default(now())

  //relations
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade)

  @@index([postId,userId]) //composite index for faster queries
  @@unique([userId,postId]) //same user cannot like twice as it prevents same user liking post twice
}


model Follows{

  followerId String
  followingId String
  createdAt DateTime @default(now())

  //relations
  follower User @relation("following",fields: [followerId],references: [id],onDelete: Cascade)
  following User @relation("follower",fields: [followingId],references: [id],onDelete: Cascade)

  @@index([followerId,followingId])
  @@id([followerId,followingId]) //composite primary key prevent duplicates follows
}


model Notification{
  id String @id @default(cuid())
  userId String
  creatorId String
  type NotificationType
  read Boolean @default(false)
  createdAt DateTime @default(now())
  postId String?
  commentId String?

  //relations
  user User @relation("userNotifications",fields: [userId],references: [id],onDelete: Cascade)
  creator User @relation("notificationCreator",fields: [creatorId],references: [id],onDelete: Cascade)
  post Post? @relation(fields: [postId],references: [id],onDelete: Cascade)
  comment Comment? @relation(fields: [commentId],references: [id],onDelete: Cascade)

  @@index([userId,createdAt])
}


enum NotificationType{
 LIKE 
 COMMENT 
 FOLLOW
}


